package com.rahnemacollege.test;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.rahnemacollege.domain.AuctionDomain;
import com.rahnemacollege.domain.SimpleUserDomain;
import com.rahnemacollege.domain.UserDomain;
import com.rahnemacollege.model.Auction;
import com.rahnemacollege.service.AuctionService;
import org.assertj.core.api.AssertionsForClassTypes;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.util.MultiValueMap;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class UserControllerTest extends InitTest {

    @Autowired
    private AuctionService auctionService;

    @Test
    public void me() throws Exception {
        UserDomain userDomain = getFirstUserInfo();
        assertThat(userDomain.getName())
                .isEqualTo(user.getName());
        assertThat(userDomain.getEmail())
                .isEqualTo(user.getEmail());
    }

    @Test
    public void editName() throws Exception {
        SimpleUserDomain simpleUserDomain = new SimpleUserDomain("ali", "");
        user.setName("ali");
        String request = gson.toJson(simpleUserDomain);
        mvc.perform(post(EDIT).header("auth", auth).contentType(MediaType.APPLICATION_JSON).content(request)).andExpect(status().isOk());
        UserDomain userDomain = getFirstUserInfo();
        AssertionsForClassTypes.assertThat(userDomain.getName())
                .isEqualTo(user.getName());
        AssertionsForClassTypes.assertThat(userDomain.getEmail())
                .isEqualTo(user.getEmail());
    }

    @Test
    public void editEmail() throws Exception {
        SimpleUserDomain simpleUserDomain = new SimpleUserDomain("", "invalid.email");
        String request = gson.toJson(simpleUserDomain);
        mvc.perform(post(EDIT).header("auth", auth).contentType(MediaType.APPLICATION_JSON)
                .content(request)).andExpect(status().is(443));
        UserDomain userDomain = getFirstUserInfo();
        AssertionsForClassTypes.assertThat(userDomain.getName())
                .isEqualTo(user.getName());
        AssertionsForClassTypes.assertThat(userDomain.getEmail())
                .isEqualTo(user.getEmail());
    }

    @Test
    public void setPicture() throws Exception {
        FileInputStream fis = new FileInputStream(Image_PATH);
        MockMultipartFile multipartFile = new MockMultipartFile("file", fis);
        MockMultipartFile profilePicture = new MockMultipartFile("picture", "Beautiful_Fantasy_Worlds_Wallpapers_31.jpg", "multipart/form-data", multipartFile.getBytes());
        mvc.perform(MockMvcRequestBuilders.multipart(EDIT_PICTURE).file(profilePicture).header("auth", auth)).andExpect(status().is(200));
    }

    @Test
    public void getAuctions() throws Exception {
        MultiValueMap<String, String> params = new HttpHeaders();
        params.add("page", "0");
        params.add("size", "5");


        String response = mvc.perform(MockMvcRequestBuilders.get(AUCTIONS)
                .header("auth", auth2)
                .params(params))
                .andDo(print())
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();
        int objectCount = response.split("},").length - 2;
//        System.err.println(response);
        assertThat(response.contains("\"totalElements\" : 2,")).isTrue();
        assertThat(response.contains(" \"totalPages\" : 1,")).isTrue();
        assertThat(objectCount > -1).isTrue();
        assertThat(response.length() > 47).isTrue();
        response = response.substring(46);
        ArrayList<AuctionDomain> auctionDomains = new ArrayList<>();
        for (int i = 0; i < objectCount; i++) {
            if (i == objectCount - 1)
                auctionDomains.add(gson.fromJson(response.split("},")[i].substring(0, response.split("},")[i].lastIndexOf(']'))
                        , AuctionDomain.class));
            else
                auctionDomains.add(gson.fromJson(response.split("},")[i] + "}", AuctionDomain.class));
        }
        assertThat(auctionDomains.size()).isEqualTo(2);
        assertThat(auctionDomains.get(0)).isNotNull();
        assertThat(auctionDomains.get(0).isMine()).isTrue();
        assertThat(auctionDomains.get(0).getTitle()).isEqualTo("اجاق گاز رهنماکالج");

        assertThat(auctionDomains.get(1)).isNotNull();
        assertThat(auctionDomains.get(1).isMine()).isTrue();
        assertThat(auctionDomains.get(1).getTitle()).isEqualTo("Apple Watch");

        /*
        final Map<String, Object> parameters = new HashMap<>();
        HttpHeaders headers = new HttpHeaders();
        parameters.put("page", "0");
        parameters.put("size", "5");
        headers.add("auth", auth2);
        Traverson t = new Traverson(new URI("http://localhost:" + 8080 + "/users/auctions"), MediaTypes.HAL_JSON);
        MockMvcClientHttpRequestFactory requestFactory = new MockMvcClientHttpRequestFactory(mvc);
        t.setRestOperations(new RestTemplate(requestFactory));
        PagedResources<Resource<AuctionDomain>> resources = t.follow().withHeaders(headers)
                .toObject(new TypeReferences.PagedResourcesType<Resource<AuctionDomain>>() {
                });
        assertThat(resources.getMetadata().getTotalElements()).isEqualTo(2L);
        System.err.println();
        Iterator<Resource<AuctionDomain>> iterator = resources.iterator();
        System.err.println(iterator);
        while (iterator.hasNext())
            System.err.println(iterator.next());
         */

        /*
        final Map<String, Object> parameters = new HashMap<>();
        HttpHeaders headers = new HttpHeaders();
        parameters.put("page", "0");
        parameters.put("size", "5");
        headers.add("auth", auth2);

        final Traverson traverson = new Traverson(new URI("http://localhost:8080/users/auctions"), MediaTypes.HAL_JSON);
        MockMvcClientHttpRequestFactory requestFactory = new MockMvcClientHttpRequestFactory(mvc);
        traverson.setRestOperations(new RestTemplate(requestFactory));
        final PagedResources<Resource<AuctionDomain>> resources = traverson
                .follow("auctions",(parameters))
                .withHeaders(headers)
                .toObject(new TypeReferences.PagedResourcesType<Resource<AuctionDomain>>() {
                });
        assertThat(resources.getContent()).isNotNull();
        assertThat(resources.getContent().size()).isEqualTo(2);
        final List<Resource<AuctionDomain>> customers = new LinkedList<>(resources.getContent());
        final AuctionDomain customer = customers.get(0).getContent();
        assertThat(customer).isNotNull();
        assertThat(customer.getCategoryId()).isEqualTo(2);

         */

      /*  ResponseEntity<PagedResources<AuctionDomain>> response = restTemplate.withBasicAuth("yalda.yarandi@gmail.com", "y.yarandi").exchange(AUCTIONS,
                HttpMethod.GET, null, new ParameterizedTypeReference<PagedResources<AuctionDomain>>() {
                });
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        System.err.println("Res : " + response.getBody().toString());
        assertThat(response.getBody().getContent().size()).isEqualTo(2);
       */
    }

    @Test
    public void getBookmarks() throws Exception {
        bookmarkAll();

        MultiValueMap<String, String> params = new HttpHeaders();
        params.add("page", "0");
        params.add("size", "4");


        String response = mvc.perform(MockMvcRequestBuilders.get(GET_BOOKMARKS)
                .header("auth", auth2)
                .params(params))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();
        System.err.println(response);
        assertThat(response.contains("\"size\" : 4,")).isTrue();
        assertThat(response.contains("\"totalElements\" : 9,")).isTrue();
        assertThat(response.contains("\"totalPages\" : 3,")).isTrue();

        bookmarkAll();
    }

    public void bookmarkAll() {
        List<Auction> auctions = auctionService.getAll();
        for (Auction auction : auctions) {
            try {
                mvc.perform(MockMvcRequestBuilders.post(ADD_BOOKMARK)
                        .header("auth", auth2)
                        .param("auctionId", String.valueOf(auction.getId())))
                        .andExpect(status().isOk());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}

